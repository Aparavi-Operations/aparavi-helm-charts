image:
  repository: aparavi.jfrog.io/app-docker-nonprod/app
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: aparavi.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: aparavi-tls
  #    hosts:
  #      - aparavi.local

platform:
  enabled: true
  config:
    rootPassword: root
    mysql:
      username: platform
      password: platform
      database: platform
  service:
    type: ClusterIP
    httpPort: 80
    netPort: 9455
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []

aggregator:
  enabled: true
  config:
    platformHost: ""  # HOSTNAME:PORT
    mysql:
      username: aggregator
      password: aggregator
      database: aggregator
  service:
    type: ClusterIP
    port: 9545
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []

collector:
  enabled: true
  config:
    aggregatorHost: ""  # HOSTNAME:PORT
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
    # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  nodeSelector: {}
  affinity: {}
  tolerations: []

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true

externalRedis:
  hostname: redis-master
  port: 6379
  password: ""

mysql:
  enabled: true
  architecture: standalone
  auth:
    database: ""
  initdbScripts:
    initdb.sql: |
      create user 'platform'@'%' identified by 'platform';
      create user 'aggregator'@'%' identified by 'aggregator';
      create database platform;
      create database aggregator;
      grant all privileges on platform.* to 'platform'@'%';
      grant all privileges on aggregator.* to 'aggregator'@'%';
  primary:
    service:
      port: 3306

externalMysql:
  hostname: mysql
  port: 3306
